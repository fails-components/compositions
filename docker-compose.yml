version: "3.9"
services:
  ltihandler: 
    image: "ghcr.io/fails-components/ltihandler"
    restart: always
    expose:
      - "8080"
    depends_on:
      - "redis"
      - "mongo"
    environment:
# secret for generation of jwt keys
      - FAILS_KEYS_SECRET
# secret for generation of generation of securing hashes for user uploaded content
      - FAILS_STATIC_SECRET
# list of configured LMS in the format "NAME OF LMS|https://path.to.lms.lti.keys/lti/certs.php|https://path.to.lms.lti.tokenurl/lti/token.php|https://path.to.lms.lti.authurl/lti/auth.php|LMSidentifier_in_db" you can include multiple LMS separated by a space
      - FAILS_LMS_LIST
# white list of courses, that have access to the service, useful for limited release
      - FAILS_LMS_COURSE_WHITELIST
      - REDIS_HOST=redis
      - FAILS_MONGO_URL=mongodb://mongo:27017

  apphandler: 
    image: "ghcr.io/fails-components/apphandler"
    restart: always
    expose:
      - "8080"
    depends_on:
      - "redis"
      - "mongo"    
    environment:
# secret for generation of jwt keys
      - FAILS_KEYS_SECRET
# secret for generation of generation of securing hashes for user uploaded content
      - FAILS_STATIC_SECRET
      - REDIS_HOST=redis
      - FAILS_MONGO_URL=mongodb://mongo:27017
      - FAILS_STATIC_WEBSERV_TYPE=nginx
    volumes:
      - type: bind
# directory to store the user uploaded files (images, pdf), backup required
        source: ${ASSETS_DATA_DIR}
        target: /usr/src/apphandler/files

  notepadhandler: 
    image: "ghcr.io/fails-components/notepadhandler"
    restart: always
    expose:
      - "8080"
    depends_on:
      - "redis"
      - "mongo"
    environment:
# secret for generation of jwt keys
      - FAILS_KEYS_SECRET
# secret for generation of generation of securing hashes for user uploaded content
      - FAILS_STATIC_SECRET
      - REDIS_HOST=redis
      - FAILS_MONGO_URL=mongodb://mongo:27017
      - FAILS_STATIC_WEBSERV_TYPE=nginx

  noteshandler: 
    image: "ghcr.io/fails-components/noteshandler"
    restart: always
    expose:
      - "8080"
    depends_on:
      - "redis"
      - "mongo"
    environment:
# secret for generation of jwt keys
      - FAILS_KEYS_SECRET
# secret for generation of generation of securing hashes for user uploaded content
      - FAILS_STATIC_SECRET
      - REDIS_HOST=redis
      - FAILS_MONGO_URL=mongodb://mongo:27017
      - FAILS_STATIC_WEBSERV_TYPE=nginx

  housekeeping: 
    image: "ghcr.io/fails-components/housekeeping"
    restart: always
    depends_on:
      - "redis"
      - "mongo"
    environment:
      - FAILS_STATIC_SECRET="dummy"
      - FAILS_KEYS_SECRET="dummy"
      - REDIS_HOST=redis
      - FAILS_MONGO_URL=mongodb://mongo:27017
    volumes:
      - type: bind
# directory to store the user uploaded files (images, pdf), backup required
        source: ${ASSETS_DATA_DIR}
        target: /usr/src/housekeeping/files

  staticserver:
    image: "ghcr.io/fails-components/staticserver"
    restart: always
    expose:
      - "80"
    environment:
# secret for generation of generation of securing hashes for user uploaded content
      - FAILS_STATIC_SECRET
    volumes:
      - type: bind
# directory to store the user uploaded files (images, pdf), backup required
        source: ${ASSETS_DATA_DIR}
        target: /usr/share/nginx/htmlsecuredfiles
        


  redis:
    image: "redis:6.2-buster"
    restart: always
    volumes:
      - type: bind
# directory to store the redis database (includes no permanent data, backup not necessary)
        source: ${REDIS_DATA_DIR}
        target: /data
    expose:
      - "6379"
# for development, should be commented for production
#    ports:
#      - "6379:6379"

  mongo:
    image: "mongo:${MONGO_VERSION:-5.0-focal}"
    restart: always
    volumes:
      - type: volume
        source: mongo_data_volume
        target: /data/db
    expose:
      - "27017"
# for development , should be commented for production
#    ports:
#      - "27017:27017"

  mongo-backup:
    container_name: mongo-backup
    image: tiredofit/db-backup
    restart: always
    links:
     - mongo
    volumes:
      - type: bind
# directory to store the mongo database backup, contains important data, back it up!
        source: ${MONGO_BACKUP_DIR}
        target: /backup
    environment:
      - DB_TYPE=mongo
      - DB_HOST=mongo
      - DB_DUMP_FREQ=1440
      - DB_DUMP_BEGIN=0000
      - DB_CLEANUP_TIME=8640
      - MD5=TRUE
      - COMPRESSION=GZ
      - SPLIT_DB=FALSE
    restart: always

  haproxy:
    build: ./loadbalancer
    restart: always
    environment:
# secret for generation of cookie hash to allow sticky session with the loadbalancer
     - FAILS_COOKIE_KEY
    ports: 
      - "${FAILS_HTTP_PORT:-80}:80"
      - "${FAILS_HTTPS_PORT:-443}:443"
    volumes:
      - type: bind
        source: ${CERT_FILE}
# path to the certificate file of your webserver
        target: /usr/local/etc/haproxy/cert.pem

volumes:
  mongo_data_volume:
    external: 
# data volume to store the mongo db files
      name: ${MONGO_DATA_VOLUME}

