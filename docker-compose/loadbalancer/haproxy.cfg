global
    log          fd@2 local2
#    log stdout  format raw  local0  info
    master-worker



resolvers docker
    nameserver dns1 127.0.0.11:53
    resolve_retries 3
    timeout resolve 1s
    timeout retry   1s
    hold other      10s
    hold refused    10s
    hold nx         10s
    hold timeout    10s
    hold valid      10s
    hold obsolete   10s

defaults
    log global
    retries 3
    option  redispatch
    timeout client 30s
    timeout connect 4s
    timeout server 30s
    mode http
    option httplog

frontend fails
   bind :80
   bind :443 ssl crt /usr/local/etc/haproxy/cert.pem
   log-format "NOIP:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"
   http-request redirect scheme https unless { ssl_fc }



   use_backend ltihandler if { path_beg /lti/ }
   use_backend apphandler if { path_beg /app/ }
   use_backend notepadhandler if { path_beg /notepad.io/ }
   use_backend noteshandler if { path_beg /notes.io/ }
# auth handler needs a rate limiting mechanism
   http-request track-sc0 src table authhandler if { path_beg /auth.io/ }   
   use_backend authhandler if { path_beg /auth.io/ }
# for rerouting in a debugging context
#   use_backend lectureappdebug if { path_beg /static/lecture }
# normal static routing
   use_backend staticserver if { path_beg /static/lecture }
   use_backend staticserver if { path_beg /static/experimental/lecture }
# for rerouting in a debugging context
#   use_backend appdebug if { path_beg /static/app }
# for rerouting debugging stuff
#   acl p_folder_expapp path_beg -i /static/experimental/
#   http-request set-path "%[path,regsub(^/static/experimental/,/static/)]" if p_folder_expapp
# normal static routing
   use_backend staticserver if { path_beg /static/app }
   use_backend staticserver if { path_beg /static/experimental/app }
   use_backend staticserver if { path_beg /static/oss }
   use_backend staticserver if { path_beg /files/ }
   use_backend stat if { path -i /proxy-stats }
   use_backend staticserver if { path_beg / }

backend ltihandler
    option forwardfor
    balance leastconn
#    option httpchk HEAD /lti/launch HTTP/1.0
#    server ltihandler ltihandler:8080 check fall 1 rise 2
    dynamic-cookie-key  "${FAILS_COOKIE_KEY}lti" 
    cookie lti prefix dynamic nocache # using the `io` cookie set upon handshake
    server-template ltihandler- 10 ltihandler:8080 check resolvers docker init-addr libc,none

backend apphandler
    option forwardfor
    balance leastconn
#    option httpchk HEAD /lti/launch HTTP/1.0
#    server ltihandler apphandler:8080 check fall 1 rise 2
    dynamic-cookie-key  "${FAILS_COOKIE_KEY}app" 
    cookie app prefix dynamic nocache # using the `io` cookie set upon handshake
    server-template apphandler- 10 apphandler:8080 check resolvers docker init-addr libc,none

backend notepadhandler
#    option httpchk HEAD /health
    balance leastconn
#    http-check expect status 200
    dynamic-cookie-key  "${FAILS_COOKIE_KEY}notepad" 
    cookie notepad prefix dynamic nocache # using the `io` cookie set upon handshake
    server-template notepadhandler- 10 notepadhandler:8080 check resolvers docker init-addr libc,none 
     
backend noteshandler
#    option httpchk HEAD /health
    balance leastconn
#    http-check expect status 200
    dynamic-cookie-key  "${FAILS_COOKIE_KEY}notes" 
    cookie notes prefix dynamic nocache # using the `io` cookie set upon handshake
    server-template noteshandler- 10 noteshandler:8080 check resolvers docker init-addr libc,none 

backend authhandler
#    option httpchk HEAD /health
    balance leastconn
#    http-check expect status 200
    dynamic-cookie-key  "${FAILS_COOKIE_KEY}auth" 
# rate limiting to 200 requests per 10 minutes
    stick-table type ipv6 size 1m expire 10m store http_req_rate(10m)
    tcp-request inspect-delay 10s
    tcp-request content track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 200 }

    cookie notes prefix dynamic nocache # using the `io` cookie set upon handshake
    server-template authhandler- 10 authhandler:8080 check resolvers docker init-addr libc,none 


backend staticserver
    option forwardfor
    balance leastconn
#    option httpchk HEAD /lti/launch HTTP/1.0
#    server ltihandler ltihandler:8080 check fall 1 rise 2
    server-template staticserver- 10 staticserver:80 check resolvers docker init-addr libc,none

# debugging backends
#backend lectureappdebug
#    server localmachine host.docker.internal:3000 check resolvers docker init-addr libc,none

#backend appdebug
#    server localmachine host.docker.internal:1001 check resolvers docker init-addr libc,none

backend stat
    stats enable
    stats uri /proxy-stats
    stats refresh 15s
    stats show-legends
    stats show-node

